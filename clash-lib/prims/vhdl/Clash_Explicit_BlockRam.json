[ { "BlackBox" :
    { "name" : "Clash.Explicit.BlockRam.blockRam#"
    , "kind" : "Declaration"
    , "type" :
"blockRam#
  :: ( HasCallStack  --       ARG[0]
     , Undefined a ) --       ARG[1]
  => Clock dom       -- clk,  ARG[2]
  -> Enable dom      -- en,   ARG[3]
  -> Vec n a         -- init, ARG[4]
  -> Signal dom Int  -- rd,   ARG[5]
  -> Signal dom Bool -- wren, ARG[6]
  -> Signal dom Int  -- wr,   ARG[7]
  -> Signal dom a    -- din,  ARG[8]
  -> Signal dom a"
    , "template" :
"-- blockRam begin
~GENSYM[~RESULT_blockRam][0] : block
  signal ~GENSYM[~RESULT_RAM][1] : ~TYP[4] := ~CONST[4];
  signal ~GENSYM[rd][3]  : integer range 0 to ~LENGTH[~TYP[4]] - 1;
  signal ~GENSYM[wr][4]  : integer range 0 to ~LENGTH[~TYP[4]] - 1;
begin
  ~SYM[3] <= to_integer(~ARG[5])
  -- pragma translate_off
                mod ~LENGTH[~TYP[4]]
  -- pragma translate_on
                ;

  ~SYM[4] <= to_integer(~ARG[7])
  -- pragma translate_off
                mod ~LENGTH[~TYP[4]]
  -- pragma translate_on
                ;
~IF ~VIVADO ~THEN
  ~SYM[5] : process(~ARG[2])
  begin
    if rising_edge(~ARG[2]) then
      if ~ARG[6] ~IF ~ISENABLED[3] ~THEN and ~ARG[3] ~ELSE ~FI then
        ~SYM[1](~SYM[4]) <= ~TOBV[~ARG[8]][~TYP[8]];
      end if;
      ~RESULT <= fromSLV(~SYM[1](~SYM[3]))
      -- pragma translate_off
      after 1 ps
      -- pragma translate_on
      ;
    end if;
  end process; ~ELSE
  ~SYM[5] : process(~ARG[2])
  begin
    if rising_edge(~ARG[2]) then
      if ~ARG[6] ~IF ~ISENABLED[3] ~THEN and ~ARG[3] ~ELSE ~FI then
        ~SYM[1](~SYM[4]) <= ~ARG[8];
      end if;
      ~RESULT <= ~SYM[1](~SYM[3])
      -- pragma translate_off
      after 1 ps
      -- pragma translate_on
      ;
    end if;
  end process; ~FI
end block;
--end blockRam"
    }
  }
]
